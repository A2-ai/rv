project-dir: rv-val-003
config: rv-val-002.toml

# This workflow tried to test renv migration "the real way" but ran into multiple issues.
# Kept for reference on why the simple approach (rv-val-002) is better.
#
# What went wrong:
# 1. renv prompts for consent even with consent options set ✅ Fixed with prompt=FALSE
# 2. Framework timeout bug: treats timeouts as failures even when operations finish fast!
#    (renv completes in 24ms, framework waits 5s, then fails the test anyway)
# 3. File visibility: rv can't find renv-generated files but finds manually created ones
#    (both use same thread structure, so not thread isolation - something about renv vs manual)
#
# Why rv-val-002 works instead:
# - Creates renv.lock manually with writeLines() - rv finds it fine
# - Same thread structure as this workflow, just different file creation method  

test:
  steps:
  - name: "Start R"
    run: "R"
    thread: r
    timeout: 3
  - name: "Initialize renv project"
    run: |
      # Provide consent for renv operations (avoid interactive prompts)
      options(renv.consent = TRUE)
      options(renv.interactive = FALSE)
      
      # Initialize renv project (creates renv/ folder and .Rprofile)  
      renv::init(bare = TRUE, restart = FALSE)
      
      # Verify initialization worked
      cat("renv initialized successfully\n")
      cat("Files created:", paste(list.files("."), collapse=", "), "\n")
    thread: r
    assert:
      contains:
        - "renv initialized successfully"

  - name: "Install packages and create lockfile"
    run: |
      # Install some common packages (force yes to all prompts)
      renv::install(c("dplyr", "ggplot2", "jsonlite"), prompt = FALSE)
      
      # Create snapshot (this generates the renv.lock file)  
      renv::snapshot(prompt = FALSE)
      
      cat("Package installation and snapshot completed\n")
    thread: r
    assert:
      contains:
        - "Package installation and snapshot completed"

  - name: "Verify renv.lock file is ready"
    run: |
      # Final verification that renv.lock exists and is readable
      if (!file.exists("renv.lock")) {
        stop("FATAL: renv.lock does not exist!")
      }
      
      # Check if we can read it
      content <- tryCatch({
        readLines("renv.lock", n = 10)
      }, error = function(e) {
        stop("FATAL: Cannot read renv.lock: ", e$message)
      })
      
      cat("✓ renv.lock verification successful\n")
      cat("✓ File size:", file.size("renv.lock"), "bytes\n")
      cat("✓ Can read file contents\n")
      cat("✓ First line:", content[1], "\n")
    thread: r
    assert:
      contains:
        - "✓ renv.lock verification successful"
        - "✓ File size:"
        - "✓ Can read file contents"

  - name: "Migrate renv project using rv"  
    run: "rv migrate renv"
    thread: rv
    assert: 
      contains: 
       - "renv.lock was successfully migrated to rproject.toml"