name: R Integration Tests

on:
  push:
    branches:
      - "r-tests-" 
    paths-ignore:
      - "docs/**"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "README.md"

jobs:
  test:
    name: R Integration Tests (${{ matrix.os }})
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.4'
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Build rv
      run: cargo build --features=cli --release

    - name: Add rv to PATH (Unix)
      if: runner.os != 'Windows'
      run: echo "${{ github.workspace }}/target/release" >> $GITHUB_PATH
      
    - name: Add rv to PATH (Windows)
      if: runner.os == 'Windows'
      run: echo "${{ github.workspace }}/target/release" >> $env:GITHUB_PATH
    
    - name: Verify R installation (Unix)
      if: runner.os != 'Windows'
      run: |
        R --version
        which R
        R --slave -e "cat('R is working:', R.version.string, '\n')"
        R --slave -e "cat('Library paths:', paste(.libPaths(), collapse=', '), '\n')"
        R --slave -e "cat('Working directory:', getwd(), '\n')"
        R --slave -e "cat('R_LIBS_USER:', Sys.getenv('R_LIBS_USER'), '\n')"
        R --slave -e "cat('R_LIBS_SITE:', Sys.getenv('R_LIBS_SITE'), '\n')"
        
    - name: Verify R installation (Windows)
      if: runner.os == 'Windows'
      run: |
        R.exe --version
        where R.exe
        R.exe --slave -e "cat('R is working:', R.version.string, '\n')"
        R.exe --slave -e "cat('Library paths:', paste(.libPaths(), collapse=', '), '\n')"
        R.exe --slave -e "cat('Working directory:', getwd(), '\n')"
        R.exe --slave -e "cat('R_LIBS_USER:', Sys.getenv('R_LIBS_USER'), '\n')"
        R.exe --slave -e "cat('R_LIBS_SITE:', Sys.getenv('R_LIBS_SITE'), '\n')"
        
    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: cargo test --features=cli --test r_integration -- --nocapture
      env:
        RUST_BACKTRACE: 1
        RV_TEST_VERBOSE: 1 

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: cargo test --features=cli --test r_integration -- --nocapture
      env:
        RUST_BACKTRACE: 1
        RV_TEST_VERBOSE: 1 
